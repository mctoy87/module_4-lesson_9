'use strict';
//Модуль 4 урок 9. метод defineProperty - позволяет указывать настройки для свойств объекта


const car = {
    car: 'mini',
    model: 'cooper',
    price: 30000,
}

Object.defineProperty(car, 'model', {  //2параметр- м.б. новое или имеющееся свойствоб 3 параметр - это объекст с дескрипторами
    
    //флаги или дескрипторы данных - позволяют управлять свойствами объекта
    configurable: false, // ЗАПРЕЩАЕТ удалять свойство если false (true по умолчанию)
    enumerable: false,  //ЗАПРЕЩАЕТ итерировать свойство если false (true по умолчанию) (св-во в объекте остается, но в переборе объекта пропадает)  
    writable: false, // ЗАПРЕЩАЕТ перезаписывать свойство если false (true по умолчанию)


});

Object.defineProperty(car, 'fullName', {    //добавим новое свойство для геттера и сеттера
    //дескрипторы функций 
    get() {                                 //что-то возвращает (get - получить)
        return `${this.car} ${this.model}`;
    },

    set(val) {                                 //получает что-л (val в нашем случае) и записывает (set) значение  (comment в нашем случае)
        this.comment = val;
        // if (typeof val === 'string') {      //Читай после понимания кода ниже. Это вариант записи в set с условием, что в новое свойство fullName будет присвоена строка, иначе она даже не появиться в списке свойств объекта. Так можно "защищать" свойства
        //     this.comment = val;
        // }
    }
});
console.log(car.fullName);//получить getter (обрати внимание без вызова функции), т.е. получаем значение которое "возвращает getter в свойство fullName"
car.fullName = 'Тачка огонь!'; //записать (set) что-либо через свойство fullName. Т.о. добавлено новое свойство comment в объекте со значением которое мы присвоили


// car.model = 'electric'; //перезаписать свойство
// delete car.model; //удалить свойство


console.log(car);
console.log(Object.keys(car));          //перебираем значения объекта 
console.log(Object.entries(car));       //перебираем значения объекта

const values = Object.entries(car);
for (const [key, value] of values) {    //перебираем значения объекта из двумерного массива в значения с помощью деструктуризации
    console.log(key, value);
}

//можно с недавнего времени напрямую использоваь в объекте геттеры и сеттеры без Object.defineProperty

const hero = {
    name: 'Tor',
    weapon: 'hammer',
    age: 300,
    get comment() {                                 //1. можно написать название 'comment'
        return this.trueComment;                    //3. возвращать будет значение trueComment
    },

    set comment(val) {                                 //получает что-л (val в нашем случае) и записывает (set) значение  (comment в нашем случае)
        if (typeof val === 'string') {      //Читай после понимания кода ниже. Это вариант записи в set с условием, что в новое свойство fullName будет присвоена строка, иначе она даже не появиться в списке свойств объекта. Так можно "защищать" свойства
            this.trueComment = val;         //4. если проверку проходит, то может перезаписывать значение trueComment
        }
    },
    trueComment: 'not',                 //2. создаем новое свойство и присвоим ему что-либо
}
console.log(hero.comment);              //5. здесь будет значение 'not, т.е. то что мы уже присвоили

hero.comment = 123;                     //6.пробуем получить (присвоить) новое значение, которое не проходит проверку (сеттер). здесь все также будет значение 'not
console.log(hero.comment); 

hero.comment = "Комментарий прошел проверку"; //7.если проходит проверку (сеттер). здесь будет значение присвоенное в этой строке
console.log(hero.comment); 

console.log(hero);
console.log(Object.keys(hero));          //перебираем значения объекта 
console.log(Object.entries(hero));       //перебираем значения объекта